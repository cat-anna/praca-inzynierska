/* 
 *  VisApp source file  
 *
 *  Release version: 1.1 December 2014
 *  File: VisApp/core/src/Worker/WorkerServer.cpp
 *  Author: Paweu
 *  Header Date: Sun Dec  7 18:03:47 GMT 2014
 *
 */
/*--END OF HEADER BLOCK--*/
//Generated by "D:\CommandLine\csrc.bat"

#include "stdafx.h"
#include "WorkerServer.h"

namespace WorkerServer { 

WorkerServer::WorkerServer(unsigned QueueSize, unsigned QueueCount) : 
		m_Clients(), 
		m_QueueCount(QueueCount),
		m_QueueSize(QueueSize) {
#pragma warning ( suppress:4244 )
	srand(time(NULL));
}

WorkerServer::~WorkerServer() {
	for(auto *i : m_Clients) {
		delete i;
	}
	m_Clients.clear();

}

xml_node WorkerServer::GenerateExecutionXML(xml_document &document, WorkerCommand ExecMode) {
	document.reset();

	xml_node root = document.append_child(L"Worker");
	root.append_child(L"ExecMode").text() = WorkerCommands::CommandToString(ExecMode);
	xml_node Config = root.append_child(L"Configuration");

	return root.append_child(WorkerCommands::CommandToString(WorkerCommand::wc_ExecuteWorker));
}

xml_node WorkerServer::QuerryWorkerDescription(const std::wstring &ExecFile, xml_document &doc) {
	doc.reset();
	WorkerInstance* client = new WorkerInstance(ExecFile, m_QueueSize, m_QueueCount, ProcessTracker::rf_Default, this);
	
	return xml_node();
}

bool WorkerServer::QuerryWorkerDescriptionAsync(const std::wstring &ExecFile, boost::function<void(xml_node)> DescFunc) {

	return false;
}

WorkerInstance *WorkerServer::CreateInstance(const std::wstring &ExecFile, unsigned RunFlags) {
	WorkerInstance* client = new WorkerInstance(ExecFile, m_QueueSize, m_QueueCount, RunFlags, this);
	m_Clients.push_back(client);
	return client;
}
	
/*
WorkerInstance *WorkerServer::GetWorker(unsigned index){
	return 0;//TODO
}

size_t WorkerServer::GetWorkerCount(){
	return m_Clients.size();
}*/

void WorkerServer::RemoveInstance(WorkerInstance *inst) {
	m_Clients.remove(inst);
}

void WorkerServer::ProcessInstances() {
	for(auto *i : m_Clients)
		i->ProcessInstance();
}

} //namespace WorkerServer
