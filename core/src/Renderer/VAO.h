/* 
 *  VisApp source file  
 *
 *  Release version: 1.1 December 2014
 *  File: VisApp/core/src/Renderer/VAO.h
 *  Author: Paweu
 *  Header Date: Sun Dec  7 18:03:47 GMT 2014
 *
 */
/*--END OF HEADER BLOCK--*/
/*
Generated by "D:\CommandLine\csrc.bat"
On 2014-03-15  8:38:50,53
by Paweu
*/

#pragma once
#ifndef VAO_H
#define VAO_H

namespace VisApp {
namespace Renderer { 
 
namespace OGL = VisApp::Types::OGL;

class VAO {
public:
	VAO();
	~VAO();

	void Free();
	void New();

	void Bind() const { glBindVertexArray(m_VAO); }
	void UnBind() const { glBindVertexArray(0); }

	void DrawElements(unsigned NumIndices, unsigned BaseIndex, unsigned BaseVertex, unsigned ElementsType) const {
 	     glDrawElementsBaseVertex(ElementsType, NumIndices, m_IndexValueType,
                                (void*)(m_IndexTypeSize * BaseIndex), BaseVertex);
 //	     glDrawElements(ElementsType, NumIndices, m_IndexValueType,
//                                (void*)(m_IndexTypeSize * BaseIndex));
	}

	void AddDataChannel(const void* data, size_t ElementCount, const OGL::TypeInfo& typeinfo, unsigned &Channel);
	void WriteIndexes(const void* data, size_t Count, const OGL::TypeInfo& typeinfo);

	template <unsigned LEN, class T>
	void AddDataChannel(const T* data, size_t Count, unsigned &Channel) {
		OGL::TypeInfo t(LEN, sizeof(T), OGL::glType<T>::value());
		AddDataChannel(data, Count, t, Channel);
	}

	template <class T>
	void WriteIndexes(const T* data, size_t Count) {
		OGL::TypeInfo t(1, sizeof(T), OGL::glType<T>::value());
		WriteIndexes(data, Count, t);
	}
private:
	std::vector<GLuint> m_Buffers;
	GLuint m_VAO, m_Index;

	GLuint m_IndexValueType, m_IndexTypeSize;
};

} //namespace Renderer
} //namespace VisApp

#endif
