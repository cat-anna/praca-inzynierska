/* 
 *  VisApp source file  
 *
 *  Release version: 1.1 December 2014
 *  File: VisApp/Plugins/TextImport/FileReader.cpp
 *  Author: Paweu
 *  Header Date: Sun Dec  7 18:03:47 GMT 2014
 *
 */
/*--END OF HEADER BLOCK--*/
/*
Generated by "D:\CommandLine\csrc.bat"
On 2014-03-05 21:06:04,02
by Paweu
*/
#include "stdafx.h"
#include "TextImport.h"
#include "FileReader.h"
#pragma unmanaged

index_t FileReader::SplitLine(std::string& sline, ReadBucket::LineVector &out, const LineImportSettings &settings) {
	index_t index = 0;
	index_t size = out.size();
	try {
		const char *line = sline.c_str();
		while(*line) {
			if(*line == settings.CollumnSeparator) {
				++line;
				if(settings.IgnoreFollowingSepparators) {
					while(*line == settings.CollumnSeparator) ++line;
				} else {
					while(*line == settings.CollumnSeparator) {
						out[index] = static_cast<float_t>(0.0);
						++index;
						++line;
					} 
				}
			} else {
				float_t value = static_cast<float_t>(::strtod(line, (char**)&line));
				out[index] = value;
				++index;
			}  
			if(index == size) return index;
		}
	}
	catch(...) { }
	return index;
}


FileReader::FileReader(unsigned Settings):
		m_Input(), 
		m_FilePos(0),
		m_Flags(0) {

	Settings &= ~frf_InternalSettingsMask;
	m_Flags |= Settings;
}

FileReader::~FileReader() {
}

void FileReader::DoReadLine(ReadBucket::LineVector &line) {
	if(Finished()) return;
	if(line.empty())
		line.resize(10);
	std::string sline;
	std::getline(*m_Input, sline);
	m_FilePos = static_cast<float>(m_Input->tellg());
	if(m_Input->eof()) {
		return;
	}
	SplitLine(sline, line, m_LineSettings);
}

int FileReader::DoReadBucket(ReadBucket &bucket) {
	if(Finished()) return 0;

	index_t read = 0;
	for(auto &it: bucket.GetBucket()) {
		std::string line;
		std::getline(*m_Input, line);
		m_FilePos = static_cast<float>(m_Input->tellg());
		if(m_Input->eof())
			break;
		index_t processed = SplitLine(line, it, m_LineSettings);
		index_t remain = it.size() - processed;
		if(remain)
			memset(&it[0] + processed, 0, sizeof(it[0]) * remain);
		++read;
	}

	return read;
}
