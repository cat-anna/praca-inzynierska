/* 
 *  VisApp source file  
 *
 *  Release version: 1.1 December 2014
 *  File: VisApp/Plugins/CubeSlicer/CubeLayer.h
 *  Author: Paweu
 *  Header Date: Sun Dec  7 18:03:47 GMT 2014
 *
 */
/*--END OF HEADER BLOCK--*/
/*
	Generated by cppsrc.sh
	On 
	by Paweu
*/

#pragma once
#ifndef CubeLayer_H
#define CubeLayer_H

#pragma unmanaged

#include <VisApp\include\Tools\Planes.h>
#include <VisApp\include\Tools\Color.h>

using namespace VisApp;
using namespace VisApp::Tools;

#define Math VisApp::Math

struct CubeSlice {
	bool Hover;
	bool Hide;

	bool SlicedCubeMode;//not impl

	Math::uvec3 CenterPoint;
	Math::fvec3 Rotation;

	Planes::Plane Plane;

	CubeSlice() { }
	CubeSlice(Planes::Plane xPlane, const Math::uvec3& Center, const Math::fvec3& xRotation = Math::fvec3()) {
		Plane = xPlane;
		CenterPoint = Center;
		Rotation = xRotation;
		Hide = false;
		Hover = false;
	}
};

enum class CubeLayerMode {
	Planes3,
	OuterCube,
	User,
};

class CubeLayer : public Renderer::LayerInterface {
public:
	CubeLayer(const std::wstring& Name);
 	virtual ~CubeLayer();

	static const wchar_t *GetClassName() { return L"D3TexturedDynamicCube"; }

	void SetSourceCube(const std::vector<Color::RGB> &input, const Math::uvec3 &size);
	void AddSlice();

	std::vector<CubeSlice>& Slices() { return m_Slices; }

	void SetMode(CubeLayerMode mode);
	CubeLayerMode GetMode() const { return m_Mode; }

	void InvalidateSlicesVAO() { m_RegenerateSlicesVAO = true; }
	const Math::uvec3& CubeSize() const { return m_CubeSize; }
	
	void ShowOuterEdges(bool val) { m_RenderCubeEdges = val; m_RegenerateEdgesMesh = true; };
	bool IsOuterEdgesVisible() const { return m_RenderCubeEdges; }
	void ShowInnerEdges(bool val) { m_RenderInternalEdges = val; m_RegenerateEdgesMesh = true; };
	bool IsInnerEdgesVisible() const { return m_RenderInternalEdges; }
//LayerInterface impl
	void DoRender(Renderer::GraphicDevice &dev) const;
	virtual Error Initialize(Renderer::GraphicDevice &dev);
	virtual Error Finalize(Renderer::GraphicDevice &dev);
	virtual Error Load(const xml_node src);
	virtual Error Save(xml_node dst) const;
	virtual const wchar_t* GetLayerClassName() const { return GetClassName(); }
	virtual Renderer::LayerCLIGUIHandler* QuerryCLIGuiHandler() const;
protected:
private: 
	std::vector<CubeSlice> m_Slices;
	Math::uvec3 m_CubeSize;
	Renderer::Texture3d m_CubeTexture;
	GLuint m_CubeSizeLocation, m_BaseColorLocation;
	CubeLayerMode m_Mode;

	Renderer::VAO m_SlicesVAO, m_EdgesVAO;
	Renderer::VAO::MeshVector m_SlicesMesh, m_EdgesMesh;

	bool m_RenderCubeEdges;
	bool m_RenderInternalEdges;
	bool m_RegenerateSlicesVAO, m_RegenerateEdgesMesh;

	/*static */ mutable std::weak_ptr<Renderer::LayerCLIGUIHandler> _GuiHandlerInstance;
	mutable std::shared_ptr<Renderer::LayerCLIGUIHandler> m_GuiHandler;

	void RecreateSlicesVAO();
	void RecreateEdgesMesh();
	void CreateEdgesSliceMesh(std::vector<Math::fvec3> &VertexVec, std::vector<unsigned> &IndexVector);
};

class CubeLayerDescriptor : public VisApp::Plugins::LayerPluginDescriptor {
public:
	CubeLayerDescriptor() {
		SetName(L"Cube inspector Layer");
		SetDescription(L"Layer interface for cube inspector");
		Register([] (const std::wstring &Name) -> Renderer::LayerInterface* {
			return new CubeLayer(Name);
		}, CubeLayer::GetClassName());
	}
};

#endif

